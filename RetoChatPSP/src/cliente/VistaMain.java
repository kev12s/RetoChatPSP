/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cliente;

import java.awt.Dialog;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import servidor.ListaClientes;

/**
 *
 * @author 2dami
 */
public class VistaMain extends javax.swing.JFrame {

    // Lista para almacenar los mensajes recibidos
    private final List<String> mensajesRecibidos = new ArrayList<>();
    private volatile boolean ejecutando = false;
    private Thread hiloRecepcion;
    private Thread hiloActualizacionUI;
    private final Cliente cliente = new Cliente();
    private ListaClientes listaClietes = new ListaClientes();

    /**
     * Creates new form MainView
     */
    public VistaMain() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userName = new javax.swing.JLabel();
        txtFieldEnviarMensaje = new javax.swing.JTextField();
        btnConectar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaMensajes = new javax.swing.JTextArea();
        txtFieldIP = new javax.swing.JTextField();
        txtFieldPuerto = new javax.swing.JTextField();
        btnEnviar1 = new javax.swing.JButton();
        txtFieldDestinatario = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        lblSaludoCliente = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtFieldEnviarMensaje.setText("Escribe un mensaje...");

        btnConectar.setText("CONECTAR");
        btnConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConectarActionPerformed(evt);
            }
        });

        textAreaMensajes.setColumns(20);
        textAreaMensajes.setRows(5);
        jScrollPane1.setViewportView(textAreaMensajes);

        txtFieldIP.setText("127.0.0.1");

        txtFieldPuerto.setText("5000");

        btnEnviar1.setText("ENVIAR");
        btnEnviar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviar1ActionPerformed(evt);
            }
        });

        txtFieldDestinatario.setText("jTextField1");
        txtFieldDestinatario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFieldDestinatarioActionPerformed(evt);
            }
        });

        jLabel1.setText("Destinatario:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(txtFieldEnviarMensaje)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(btnEnviar1))
                                                        .addComponent(jScrollPane1))
                                                .addContainerGap())
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                .addComponent(userName, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addContainerGap())
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(btnConectar)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(txtFieldIP, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addComponent(lblSaludoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(txtFieldPuerto, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(jLabel1)
                                                                                .addGap(18, 18, 18)
                                                                                .addComponent(txtFieldDestinatario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                                .addGap(58, 58, 58))))))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(txtFieldIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtFieldPuerto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnConectar))
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(txtFieldDestinatario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel1)
                                        .addComponent(lblSaludoCliente))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(userName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(txtFieldEnviarMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnEnviar1))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConectarActionPerformed(java.awt.event.ActionEvent evt) {
        String user = obtenerNombreUser();
        if (user == null || user.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Debe ingresar un nombre de usuario v√°lido", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (listaClietes.existeUsuario(user)) {
            JOptionPane.showMessageDialog(this, "Ese usuario ya existe. Prueba otro nombre", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Detener hilos anteriores si est√°n en ejecuci√≥n
        detenerHilos();

        userName.setText(user);
        String servidor = txtFieldIP.getText();
        int puerto = Integer.parseInt(txtFieldPuerto.getText());

        if (cliente.conectar(servidor, puerto, user)) {
            // Limpiar mensajes anteriores
            mensajesRecibidos.clear();
            ejecutando = true;

            // Hilo para recibir mensajes del servidor
            hiloRecepcion = new Thread(() -> {
                while (ejecutando && cliente.isConectado()) {
                    try {
                        String mensaje = cliente.recibirMensaje();
                        if (mensaje != null) {
                            actualizarAreaMensajes(mensaje);
                        }
                    } catch (Exception e) {
                        if (ejecutando && cliente.isConectado()) {
                            actualizarAreaMensajes("Error al recibir mensaje: " + e.getMessage());
                        }
                        break;
                    }
                }
                actualizarAreaMensajes("Desconectado del servidor");
            });

            // Hilo para actualizar la interfaz de usuario
            hiloActualizacionUI = new Thread(new Runnable() {
                @Override
                public void run() {
                    while (ejecutando) {
                        try {
                            java.awt.EventQueue.invokeAndWait(new Runnable() {
                                @Override
                                public void run() {
                                    actualizarUI();
                                }
                            });
                            Thread.sleep(100); // Actualizar cada 100ms
                        } catch (Exception e) {
                            if (ejecutando) {
                                e.printStackTrace();
                            }
                        }
                    }
                }
            });

            // Iniciar los hilos
            hiloRecepcion.start();
            hiloActualizacionUI.start();

            actualizarAreaMensajes("Conectado al servidor como: " + user);
        } else {
            JOptionPane.showMessageDialog(this,
                    "No se pudo conectar al servidor",
                    "Error de conexi√≥n",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    // M√©todo para actualizar el √°rea de mensajes
    private synchronized void actualizarAreaMensajes(String mensaje) {
        if (mensaje != null && !mensaje.trim().isEmpty()) {
            mensajesRecibidos.add(mensaje);
        }
    }

    // M√©todo para actualizar la interfaz de usuario
    private synchronized void actualizarUI() {
        // Hacer una copia de los mensajes
        if (mensajesRecibidos.isEmpty()) {
            return;
        }
        List<String> copiaMensajes = new ArrayList<>(mensajesRecibidos);
        mensajesRecibidos.clear();

        // Actualizar la interfaz de usuario
        for (String mensaje : copiaMensajes) {
            textAreaMensajes.append(mensaje + "\n");
        }
        if (!copiaMensajes.isEmpty()) {
            textAreaMensajes.setCaretPosition(textAreaMensajes.getDocument().getLength());
        }
    }

    // M√©todo para detener los hilos de forma segura
    private void detenerHilos() {
        ejecutando = false;

        if (hiloRecepcion != null && hiloRecepcion.isAlive()) {
            hiloRecepcion.interrupt();
            try {
                hiloRecepcion.join(1000); // Esperar hasta 1 segundo
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }

        if (hiloActualizacionUI != null && hiloActualizacionUI.isAlive()) {
            hiloActualizacionUI.interrupt();
            try {
                hiloActualizacionUI.join(1000); // Esperar hasta 1 segundo
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
    }

    // M√©todo para obtener el nombre de usuario
    private String obtenerNombreUser() {
        // Crear un di√°logo modal (ventana emergente)
        JDialog popup = new JDialog(this, "Introducir username", true);
        popup.setSize(300, 180);
        popup.setLayout(new FlowLayout());
        popup.setLocationRelativeTo(this);

        // Etiqueta y campo de texto
        JLabel UserNameLabel = new JLabel("Nombre de usuario:");
        JTextField campoUsuario = new JTextField(15);

        // Bot√≥n para cerrar el popup
        JButton aceptarBtn = new JButton("Aceptar");

        // Acci√≥n del bot√≥n "Aceptar"
        aceptarBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                name = campoUsuario.getText().trim();
                if (!name.isEmpty()) {
                    JOptionPane.showMessageDialog(popup,
                            "Hola, " + name + "!",
                            "Bienvenido, iniciando su sesi√≥n :)",
                            JOptionPane.INFORMATION_MESSAGE);
                    popup.dispose(); // Cierra la ventana emergente
                } else {
                    JOptionPane.showMessageDialog(popup,
                            "Por favor, introduce tu nombre de usuario para poder conectarte.",
                            "Campo vac√≠o",
                            JOptionPane.WARNING_MESSAGE);
                }
            }
        });

        popup.add(UserNameLabel);
        popup.add(campoUsuario);
        popup.add(aceptarBtn);

        popup.setVisible(true);
        return name;
    }

    private void btnEnviar1ActionPerformed(java.awt.event.ActionEvent evt) {
        String mensaje = txtFieldEnviarMensaje.getText().trim();
        String destinatario = txtFieldDestinatario.getText().trim();

        if (mensaje.isEmpty()) {
            return;
        }

        try {
            if (!destinatario.isEmpty() && !destinatario.equals("jTextField1")) {
                // Enviar mensaje privado
                cliente.enviarMensajePrivado(destinatario, mensaje);
                mensajesRecibidos.add("T√∫ (a " + destinatario + "): " + mensaje);
            } else {
                // Enviar mensaje p√∫blico
                cliente.enviarMensaje(mensaje);
                mensajesRecibidos.add("T√∫: " + mensaje);
            }
            txtFieldEnviarMensaje.setText(""); // Limpiar campo de texto
        } catch (IOException ex) {
            mensajesRecibidos.add("Error al enviar mensaje: " + ex.getMessage());
        }
    }

    private void txtFieldDestinatarioActionPerformed(java.awt.event.ActionEvent evt) {
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VistaMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VistaMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VistaMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VistaMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VistaMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton btnConectar;
    private JButton btnEnviar1;
    private JLabel jLabel1;
    private JScrollPane jScrollPane1;
    private JLabel lblSaludoCliente;
    private JTextArea textAreaMensajes;
    private JTextField txtFieldDestinatario;
    private JTextField txtFieldEnviarMensaje;
    private JTextField txtFieldIP;
    private JTextField txtFieldPuerto;
    private JLabel userName;
    private String name;

    @Override
    public void dispose() {
        detenerHilos();
        cliente.desconectar();
        super.dispose();
    }
    

    // End of variables declaration//GEN-END:variables
}
